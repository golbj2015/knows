start---------------------------------------------------------------------->
111302
shell:ln 
硬链接：ln  [参数]  源文件  目标文件
软链接：ln -s   [源文件或目录]  [目标文件或目录]

ln -s log2013.log link2013   为log2013.log文件创建软链接link2013，如果log2013.log丢失，link2013将失效 
link2013 -> log2013.log 

end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
112038
shell:grep
多个过滤条件
grep "a\|d\|f" x.txt
end------------------------------------------------------------------------>

 

start---------------------------------------------------------------------->
114915
安全工具:nikto 

perl nikto.pl -h 192.168.0.1
perl nikto.pl -h 192.168.0.1 -p 443
perl nikto.pl -h https://192.168.0.1:443/
perl nikto.pl -h 192.168.0.1 -p 443 -ssl
perl nikto.pl -h 192.168.0.1 -p 80,88,443

交互指令  
在扫描期间，按下如下的按键  
space 报告当前扫描状态  
v 打开/关闭verbose模式 
d 打开/关闭debug模式 
e 打开/关闭错误报告 
p 打开/关闭进度报告 
r 打开/关闭显示重定向 
c 打开/关闭显示cookie 
o 打开/关闭OK显示  
a 打开/关闭auth信息显示 
q 退出 
N 下一个HOST 
P 暂停 

end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
120217
shell:ln
  1．命令格式：
   ln [参数][源文件或目录][目标文件或目录]
  2．命令功能：
	Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。
	软链接：
	1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式
	2.软链接可以 跨文件系统 ，硬链接不可以
	3.软链接可以对一个不存在的文件名进行链接
	4.软链接可以对目录进行链接
end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
130519
网络安全:httponly

  PHP中的设置 
    session.cookie_httponly = True
     <?php ini_set("session.cookie_httponly", 1); 
	 // or session_set_cookie_params(0, NULL, NULL, NULL, TRUE); 
	 ?>  
  利用HTTP-only Cookie缓解XSS之痛 
    http://netsecurity.51cto.com/art/200902/111143.htm
end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
133124
网络安全:X-Frame-Options===Donot Touch Me===

  X-Frame-Options 响应头
  https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options

  点击劫持（CLICKJACKING）与X-FRAME-OPTIONS HEADER
  http://www.myhack58.com/Article/html/3/7/2014/43315.htm
end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
155741

end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
155825
GO:func
How then does Go deal with normal errors by default ? The Go way to handle errors is for
functions and methods to return an error object as their only or last return value—or nil if no error
occurred—and for calling functions to always check the error they receive. 
end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
212301
开发语言:Go:变量===Donot Touch Me===
  变量声明：
        var v1 int
        var v2 string
        var v3 [3]int 
        var v4 []int
        var v5 struct{f int}
        var v6 *int
        var v7 map[string]int
        var v8 func(a int) int
        
        var(
          v1 int
          v2 string 
        )
  变量初始化：
       var v1 int = 10
       var v2 = 10
       v3 := 10  //不可以声明全局变量  变量声明后不可以再初始化

  变量赋值：
       var v10 int 
       v10 = 111
 
       a, b, c = c, a, b //交换变量

  匿名变量:
       _,_,nickname := GetName()



              
end------------------------------------------------------------------------>

start---------------------------------------------------------------------->
214241
开发语言:go:常量===Donot Touch Me===
   定义：
      const PI float64 = 3.14159265
      const zero = 0.0
      const a,b,c = 1,2,"3"
      const (
          size int64 = 1024
          eof = -1
      )
      const mask = 1 << 3 //编译期运算

   预定义常量:
      true,false,iota(可被编译器修改的常量)

      const (
          c0 = iota //c0=0
          c1 = iota //c1=1
          c2 = iota //c2=2 
      )
   枚举类型：
      const (
         A = iota //A = 0
         B        //B = 1
         C        //C = 2
      )

    

end------------------------------------------------------------------------>
